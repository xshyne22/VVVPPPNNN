from datetime import time, datetime

from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import asyncio
import logging
from adapters.auth import login_to_xui
from adapters.inbounds import get_inbound, get_inbounds, add_client, delete_client
from settings import bot_token, domain_xui
from urllib.parse import quote
import json
import keyboards as kb
from utils.vless import generate_vless_url

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=bot_token)
dp = Dispatcher()



@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    await message.answer(
        'üîê –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VP333N –±–æ—Ç!\n\n'
        '–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É VPN —Å–µ—Ä–≤–∏—Å—É:\n'
        '‚Ä¢ üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö VPN-–∫–ª—é—á–µ–π\n'
        '‚Ä¢ ‚è≥ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫\n'
        '‚Ä¢ üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—à–∏–º–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏\n'
        '‚Ä¢ üì° –°—Ç–∞–±–∏–ª—å–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞ —Å –≤—ã—Å–æ–∫–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é\n\n'
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=kb.main
    )

@dp.message(lambda message: message.text == 'üõí –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É')
async def subscribes(message: types.Message):
    await message.answer(
        'üìÖ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n'
        '‚Ä¢ 1 –º–µ—Å—è—Ü - –∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n'
        '‚Ä¢ 3 –º–µ—Å—è—Ü–∞ - –≤—ã–≥–æ–¥–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç\n',
        reply_markup=kb.subscribes
    )


@dp.message(lambda message: message.text == '–£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞')
async def delete_client_handler(message: types.Message):
    try:
        # 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        session_cookie = await login_to_xui()
        if not session_cookie:
            await message.answer("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –ø–∞–Ω–µ–ª–∏ XUI")
            return

        # 2. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ inbounds
        inbounds = await get_inbounds(session_cookie)
        if not inbounds.get("obj") or not inbounds["obj"]:
            await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö inbounds")
            return

        # 3. –ò—â–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤–æ –≤—Å–µ—Ö inbounds
        user_email = f"user_{message.from_user.id}@vp333nbot"
        deleted = False

        for inbound in inbounds["obj"]:
            inbound_id = inbound["id"]
            delete_result = await delete_client(session_cookie, inbound_id, user_email)
            if delete_result.get("success"):
                deleted = True
                break

        if deleted:
            await message.answer("‚úÖ –ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω", reply_markup=kb.main)
        else:
            await message.answer("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ —É–¥–∞–ª—ë–Ω", reply_markup=kb.main)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {str(e)}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞", reply_markup=kb.main)

@dp.message(lambda message: message.text == 'üîô –ù–∞–∑–∞–¥')
async def subscribes(message: types.Message):
    await message.answer(
        '‚¨ÖÔ∏è –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n'
        '–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:'
        ,
        reply_markup=kb.main
    )

@dp.message(lambda message: message.text == '1 month')
async def subscribes(message: types.Message):
    await message.answer(
        'üéâ –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 1 –º–µ—Å—è—Ü!\n\n'
        '–°–∫–æ—Ä–æ—Å—Ç—å: –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\n\n'
        '–ù–∞–∂–º–∏—Ç–µ "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á" –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏',
        reply_markup=kb.gen
    )

@dp.message(lambda message: message.text == 'üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–¥–ø–∏—Å–∫–∞–º')
async def subscribes(message: types.Message):
    await message.answer(
        '‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –ø–æ–¥–ø–∏—Å–∫–∏\n'
        '–ö–∞–∫–æ–π —Å—Ä–æ–∫ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?'
        ,
        reply_markup=kb.subscribes
    )


@dp.message(lambda message: message.text == 'üï∞Ô∏è –°–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏')
async def check_subscription(message: types.Message):

    session_cookie = await login_to_xui()
    if not session_cookie:
        await message.answer("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –ø–∞–Ω–µ–ª–∏ XUI")
        return

    inbounds = await get_inbounds(session_cookie)
    if not inbounds.get("obj") or not inbounds["obj"]:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö inbounds")
        return

    user_email = f"user_{message.from_user.id}@vp333nbot"
    found = False

    for inbound in inbounds["obj"]:
        inbound_id = inbound["id"]
        inbound_details = await get_inbound(session_cookie, inbound_id)

        if not inbound_details.get("obj"):
            continue

        settings = json.loads(inbound_details["obj"]["settings"])
        clients = settings.get("clients", [])

        for client in clients:
            if client["email"] == user_email:
                expiry_time = client.get("expiryTime", 0)
                found = True
                break

        if found:
            break

    if not found:
        await message.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    if expiry_time == 0:
        await message.answer("–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±–µ—Å—Å—Ä–æ—á–Ω–∞—è")
        return

    expiry_datetime = datetime.fromtimestamp(expiry_time / 1000)
    time_left = expiry_datetime - datetime.now()

    if time_left.total_seconds() <= 0:
        await message.answer("–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞")
        return

    days = time_left.days
    hours, remainder = divmod(time_left.seconds, 3600)
    minutes, _ = divmod(remainder, 60)

    if days > 0:
        time_str = f"{days} –¥–Ω–µ–π, {hours} —á–∞—Å–æ–≤"
    else:
        time_str = f"{hours} —á–∞—Å–æ–≤, {minutes} –º–∏–Ω—É—Ç"

    expiry_date_str = expiry_datetime.strftime("%d.%m.%Y –≤ %H:%M")

    await message.answer(
        f"‚è≥ –î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:\n\n"
        f"‚Ä¢ –î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {time_str}\n"
        f"‚Ä¢ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {expiry_date_str}\n\n"
        f"–ß—Ç–æ–±—ã –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, –≤—ã–±–µ—Ä–∏—Ç–µ 'üõí –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'",
        reply_markup=kb.main
    )


@dp.message(lambda message: message.text == 'üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á')
async def generate_key_handler(message: types.Message):

    
    # 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ XUI
    session_cookie = await login_to_xui()
    if not session_cookie:
        await message.answer("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –ø–∞–Ω–µ–ª–∏ XUI")
        return

    # 2. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ inbounds
    inbounds = await get_inbounds(session_cookie)

    # 3. –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π inbound
    if not inbounds.get("obj") or not inbounds["obj"]:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö inbounds")
        return

    inbound_id = inbounds["obj"][0]["id"]

    user_email = f"user_{message.from_user.id}@vp333nbot"
    add_result = await add_client(session_cookie, inbound_id, user_email, expiry_days=30)

    if not add_result.get("success"):
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞")
        return

    # 4. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ inbound
    inbound = await get_inbound(session_cookie, inbound_id)

    # 5. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL
    vless_url = generate_vless_url(inbound["obj"], domain_xui)

    # 6. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(
        f"–í–∞—à–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:\n\n"
        f"`{vless_url}`\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –∫–ª—é—á –≤ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞—Ö.",
        parse_mode="Markdown"
    )


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    print("run bot . . .")
    logging.basicConfig(level=logging.INFO)
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print('–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')